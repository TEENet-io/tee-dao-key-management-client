// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.5.0
// source: voting.proto

package voting

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// VotingRequest contains details for a new voting task
type VotingRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TaskId            string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                    // Unique task identifier
	Message           []byte                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                                // Message/data to be signed
	RequiredVotes     uint32                 `protobuf:"varint,3,opt,name=required_votes,json=requiredVotes,proto3" json:"required_votes,omitempty"`              // m in m-of-n
	TotalParticipants uint32                 `protobuf:"varint,4,opt,name=total_participants,json=totalParticipants,proto3" json:"total_participants,omitempty"`  // n in m-of-n
	AppId             string                 `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                       // Application ID
	TargetContainerIp string                 `protobuf:"bytes,6,opt,name=target_container_ip,json=targetContainerIp,proto3" json:"target_container_ip,omitempty"` // Target container IP for this specific request
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VotingRequest) Reset() {
	*x = VotingRequest{}
	mi := &file_voting_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingRequest) ProtoMessage() {}

func (x *VotingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingRequest.ProtoReflect.Descriptor instead.
func (*VotingRequest) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{0}
}

func (x *VotingRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *VotingRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VotingRequest) GetRequiredVotes() uint32 {
	if x != nil {
		return x.RequiredVotes
	}
	return 0
}

func (x *VotingRequest) GetTotalParticipants() uint32 {
	if x != nil {
		return x.TotalParticipants
	}
	return 0
}

func (x *VotingRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *VotingRequest) GetTargetContainerIp() string {
	if x != nil {
		return x.TargetContainerIp
	}
	return ""
}

type VotingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	TaskId        string                 `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VotingResponse) Reset() {
	*x = VotingResponse{}
	mi := &file_voting_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingResponse) ProtoMessage() {}

func (x *VotingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingResponse.ProtoReflect.Descriptor instead.
func (*VotingResponse) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{1}
}

func (x *VotingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VotingResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *VotingResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_voting_proto protoreflect.FileDescriptor

const file_voting_proto_rawDesc = "" +
	"\n" +
	"\fvoting.proto\"\xdf\x01\n" +
	"\rVotingRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\fR\amessage\x12%\n" +
	"\x0erequired_votes\x18\x03 \x01(\rR\rrequiredVotes\x12-\n" +
	"\x12total_participants\x18\x04 \x01(\rR\x11totalParticipants\x12\x15\n" +
	"\x06app_id\x18\x05 \x01(\tR\x05appId\x12.\n" +
	"\x13target_container_ip\x18\x06 \x01(\tR\x11targetContainerIp\"Y\n" +
	"\x0eVotingResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error2<\n" +
	"\rVotingService\x12+\n" +
	"\x06Voting\x12\x0e.VotingRequest\x1a\x0f.VotingResponse\"\x00BDZBgithub.com/TEENet-io/tee-dao-key-management-client/go/proto/votingb\x06proto3"

var (
	file_voting_proto_rawDescOnce sync.Once
	file_voting_proto_rawDescData []byte
)

func file_voting_proto_rawDescGZIP() []byte {
	file_voting_proto_rawDescOnce.Do(func() {
		file_voting_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_voting_proto_rawDesc), len(file_voting_proto_rawDesc)))
	})
	return file_voting_proto_rawDescData
}

var file_voting_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_voting_proto_goTypes = []any{
	(*VotingRequest)(nil),  // 0: VotingRequest
	(*VotingResponse)(nil), // 1: VotingResponse
}
var file_voting_proto_depIdxs = []int32{
	0, // 0: VotingService.Voting:input_type -> VotingRequest
	1, // 1: VotingService.Voting:output_type -> VotingResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_voting_proto_init() }
func file_voting_proto_init() {
	if File_voting_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_voting_proto_rawDesc), len(file_voting_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_voting_proto_goTypes,
		DependencyIndexes: file_voting_proto_depIdxs,
		MessageInfos:      file_voting_proto_msgTypes,
	}.Build()
	File_voting_proto = out.File
	file_voting_proto_goTypes = nil
	file_voting_proto_depIdxs = nil
}
